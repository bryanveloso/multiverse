---
import { Base } from '@multiverse/ui/layouts';
import { getCollection } from 'astro:content';

import '../../styles/global.css';

// Generate paths for all portfolio items
export async function getStaticPaths() {
  const portfolioEntries = await getCollection('portfolio');
  return portfolioEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get props from static paths
const { entry } = Astro.props;
const { Content } = await entry.render();

// Format date function
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long' });
}
---

<Base activeSite="work">
  <Fragment slot="work">
    <div class="max-w-3xl mx-auto">
      <div class="mb-6">
        <a href="/portfolio" class="inline-flex items-center text-amber-700 hover:text-amber-900">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Back to Portfolio
        </a>
      </div>

      <article class="bg-white rounded-lg shadow-sm overflow-hidden">
        <div class="p-8">
          <header class="mb-8">
            <h1 class="text-3xl font-bold mb-2">{entry.data.title}</h1>
            <div class="flex flex-wrap items-center text-gray-600 mt-1">
              <span class="font-medium mr-2">{entry.data.organization}</span>
              <span class="mx-2">•</span>
              <span>
                {formatDate(entry.data.startDate)}
                {entry.data.endDate && ` – ${formatDate(entry.data.endDate)}`}
              </span>
              {entry.data.role && (
                <>
                  <span class="mx-2">•</span>
                  <span>{entry.data.role}</span>
                </>
              )}
            </div>

            <div class="mt-3">
              <span class="inline-block px-3 py-1 text-sm rounded-full bg-amber-100 text-amber-800">
                {entry.data.type}
              </span>
            </div>
          </header>

          <div class="prose prose-amber max-w-none">
            <Content />
          </div>

          {entry.data.tags && (
            <div class="mt-8 pt-6 border-t border-gray-200">
              <h3 class="text-sm font-medium text-gray-500 mb-3">Skills & Technologies</h3>
              <div class="flex flex-wrap gap-2">
                {entry.data.tags.map(tag => (
                  <span class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-full">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      </article>
    </div>
  </Fragment>
</Base>