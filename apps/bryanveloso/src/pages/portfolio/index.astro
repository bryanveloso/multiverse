---
import { Base } from '@multiverse/ui/layouts'
import { getCollection } from 'astro:content'

import '../../styles/global.css'

// Get all portfolio entries
const portfolioEntries = await getCollection('portfolio')

// Sort them by start date (newest first)
const sortedEntries = portfolioEntries.sort(
  (a, b) => new Date(b.data.startDate).getTime() - new Date(a.data.startDate).getTime()
)

// Format date function
function formatDate(dateString) {
  const date = new Date(dateString)
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' })
}
---

<Base activeSite="work">
  <Fragment slot="work">
    <div class="mx-auto max-w-4xl">
      <h1 class="mb-6 text-3xl font-bold">Portfolio</h1>
      <p class="mb-8 text-lg text-gray-700">A collection of my work and projects throughout my career.</p>

      <div class="space-y-12">
        {
          sortedEntries.map((entry) => (
            <div class="overflow-hidden rounded-lg bg-white shadow-sm">
              <div class="p-6">
                <div class="flex items-start justify-between">
                  <div>
                    <h2 class="text-2xl font-bold">{entry.data.title}</h2>
                    <div class="mt-1 flex items-center text-gray-600">
                      <span class="font-medium">{entry.data.organization}</span>
                      <span class="mx-2">•</span>
                      <span>
                        {formatDate(entry.data.startDate)}
                        {entry.data.endDate && ` – ${formatDate(entry.data.endDate)}`}
                      </span>
                    </div>
                    {entry.data.role && <div class="mt-1 text-gray-700">{entry.data.role}</div>}
                  </div>
                  <div class="ml-4">
                    <span class="inline-block rounded-full bg-amber-100 px-3 py-1 text-sm text-amber-800">
                      {entry.data.type}
                    </span>
                  </div>
                </div>

                <p class="mt-4 text-gray-700">{entry.data.summary}</p>

                {entry.data.tags && (
                  <div class="mt-4 flex flex-wrap gap-2">
                    {entry.data.tags.map((tag) => (
                      <span class="rounded bg-gray-100 px-2 py-1 text-xs text-gray-700">{tag}</span>
                    ))}
                  </div>
                )}

                <div class="mt-6">
                  <a
                    href={`/portfolio/${entry.slug}`}
                    class="inline-flex items-center text-amber-700 hover:text-amber-900"
                  >
                    View details
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="ml-1 h-4 w-4"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </Fragment>
</Base>
