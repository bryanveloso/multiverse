---
import { getCollection, type CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'

import FormattedDate from '@/components/formatted-date.astro'
import LegacyDisclaimer from '@/components/blog/legacy.astro'
import Footer from '@/components/footer.astro'
import { getAuthorAge } from '@/utils/age'
import { formatPostUrl } from '@/utils/posts'

import Base from '@/layouts/base.astro'
import { cn } from '@/utils/style'
import { LocationIcon } from '@/components/location-icon'
import { JobIcon } from '@/components/job-icon'
import { EraIcon } from '@/components/era-icon'
import { BackIcon } from '@/components/back-icon'

type Props = CollectionEntry<'blog'>['data']

const { title, description, date, updatedDate, heroImage } = Astro.props
const currentPost = Astro.props as Props

const authorAge = getAuthorAge(date)
const isLegacyPost = date.getFullYear() < 2013
const defaultColor = 'oklch(100% 0 0 / 10%)'

// Helper function to find active item at the time of the post
const findActiveItem = async <
  T extends CollectionEntry<'eras'> | CollectionEntry<'jobs'> | CollectionEntry<'locations'>
>(
  collectionName: 'eras' | 'jobs' | 'locations',
  date: Date
): Promise<T | undefined> => {
  const items = (await getCollection(collectionName).catch(() => [])) as T[]
  return items.find((item) => {
    const endDate = item.data.endDate || new Date()
    return date >= item.data.startDate && date <= endDate
  })
}

// Find the active items at the time of the post
const activeEra = await findActiveItem<CollectionEntry<'eras'>>('eras', date)
const activeJob = await findActiveItem<CollectionEntry<'jobs'>>('jobs', date)
const activeLocation = await findActiveItem<CollectionEntry<'locations'>>('locations', date)

// Helper function to format post ID to URL path

// Get the previous and next posts for navigation
const posts = (await getCollection('blog')).sort((a, b) => a.data.date.getTime() - b.data.date.getTime())
const currentIndex = posts.findIndex((post) => post.data.title === currentPost.title)
const previousPost = posts[currentIndex - 1]
const nextPost = posts[currentIndex + 1]
---

<Base {title} {description} image={heroImage ? heroImage.src : undefined} type="article" publishDate={date}>
  <div class="grid min-h-dvh grid-cols-1 gap-8 md:grid-cols-[24px_1fr]">
    <div
      class="col-start-1 row-span-full hidden bg-[image:repeating-linear-gradient(45deg,_var(--pattern-fg)_0,_var(--pattern-fg)_1px,_transparent_0,_transparent_50%)] bg-[size:10px_10px] bg-repeat md:block [--pattern-fg:var(--color-white)]/10"
    >
    </div>
    <div
      class={cn(
        'col-start-1 grid grid-rows-[1fr_auto] grid-cols-[repeat(3,var(--event-line-width))_12px_1fr] [--event-line-width:24px] md:col-start-2 md:[--event-line-width:36px] items-start'
      )}
    >
      <main id="main" class="col-span-5 grid grid-cols-subgrid grid-rows-[auto_auto_1fr] self-stretch text-sm">
        <!-- Row 1 -->
        <div class="col-span-3 pt-16">
          <a href="/" class="font-caps text-buttermilk flex items-baseline" aria-label="Return to homepage"
            ><BackIcon className="relative top-1 mr-2 size-3.5" /> <span class="relative top-[1px]">Back</span></a
          >
        </div>
        <div class="col-start-4 self-stretch">
          <div class="border-timeline h-full w-[1px] border-l"></div>
        </div>
        <div class="col-span-1 col-start-5 py-16 pr-6 pl-4">
          <FormattedDate {date} />
          {
            updatedDate && (
              <>
                â€” Updated <FormattedDate date={updatedDate} />
              </>
            )
          }
          <h1 class="mb-4 text-4xl font-thin">{title}</h1>
        </div>

        <!-- Row 2 -->
        <div><EraIcon className="size-3.5 text-white/10" /></div>
        <div><JobIcon className="size-3.5 text-white/10" /></div>
        <div><LocationIcon className="size-3.5 text-white/10" /></div>
        <div class="self-stretch">
          <div class="border-timeline h-full w-[1px] border-l"></div>
        </div>
        <div class="pr-6 pl-4">
          <h2 class="font-xs font-caps text-graphite pb-6 uppercase">
            The Mind of Bryan Veloso at <span class="text-sage">Age {authorAge}</span>
          </h2>
        </div>

        <!-- Row 3 - Timeline Lines -->
        {
          [
            { item: activeEra, label: activeEra?.data.title },
            { item: activeJob, label: activeJob?.data.company },
            { item: activeLocation, label: activeLocation?.data.name }
          ].map(({ item, label }) => (
            <div class="relative h-full">
              {item ? (
                <div
                  class="h-full w-[1px]"
                  style={{ backgroundImage: `linear-gradient(${item?.data.color} 90%, ${defaultColor}` }}
                />
              ) : (
                <div class="h-full w-[1px] bg-white/10" />
              )}
              <div
                class="absolute top-0 pl-1 text-[0.5rem] font-bold whitespace-nowrap uppercase"
                style={{ color: item?.data.color, writingMode: 'vertical-lr' }}
              >
                {label}
              </div>
            </div>
          ))
        }
        <div class="self-stretch">
          <div class="border-timeline h-full w-[1px] border-l"></div>
        </div>
        <div class="pr-6 pl-4">
          <article
            class="prose prose-p:font-light prose-a:underline-offset-4 prose-img:rounded prose-img:shadow prose-a:decoration-sky prose-em:font-serif prose-lead:text-md prose-lead:font-light prose-lead:text-mist prose-invert"
          >
            {
              heroImage && (
                <Image src={heroImage} alt={title} class="aspect-video w-full rounded-lg object-cover shadow" />
              )
            }
            {isLegacyPost && <LegacyDisclaimer />}
            <slot />
          </article>
          {
            (previousPost || nextPost) && (
              <nav class="grid w-full grid-cols-1 gap-8 pt-24 sm:grid-cols-3 max-w-prose">
                {previousPost && (
                  <div class="sm:col-start-1">
                    <div class="font-caps text-pewter">Previously</div>
                    <a class="text-xl leading-tight font-light" href={`/blog/${formatPostUrl(previousPost.id)}`}>
                      {previousPost.data.title}
                    </a>
                  </div>
                )}
                {nextPost && (
                  <div class="sm:col-start-3">
                    <div class="font-caps text-pewter">Up Next</div>
                    <a class="text-xl leading-tight font-light" href={`/blog/${formatPostUrl(nextPost.id)}`}>
                      {nextPost.data.title}
                    </a>
                  </div>
                )}
              </nav>
            )
          }
        </div>
      </main>
      <Footer page="post" />
    </div>
  </div>
</Base>

<!-- SEO -->
<script is:inline type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": {title},
    "description": {description},
    "datePublished": {date.toISOString()},
    "dateModified": {updatedDate ? updatedDate.toISOString() : date.toISOString()},
    "image": {heroImage ? heroImage.src : undefined},
    "author": {
      "@type": "Person",
      "name": "Bryan Veloso",
      "url": "https://bryanvelo.sos"
    }
  }
</script>
