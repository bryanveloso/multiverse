---
import { Base } from '@multiverse/ui/layouts';
import { getCollection } from 'astro:content';

import '../../styles/global.css';

// Get all portfolio entries
const portfolioEntries = await getCollection('portfolio');

// Sort them by start date (newest first)
const sortedEntries = portfolioEntries.sort(
  (a, b) => new Date(b.data.startDate).getTime() - new Date(a.data.startDate).getTime()
);

// Format date function
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
}
---

<Base activeSite="work">
  <Fragment slot="work">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold mb-6">Portfolio</h1>
      <p class="text-lg text-gray-700 mb-8">
        A collection of my work and projects throughout my career.
      </p>

      <div class="space-y-12">
        {sortedEntries.map(entry => (
          <div class="bg-white rounded-lg shadow-sm overflow-hidden">
            <div class="p-6">
              <div class="flex justify-between items-start">
                <div>
                  <h2 class="text-2xl font-bold">{entry.data.title}</h2>
                  <div class="flex items-center text-gray-600 mt-1">
                    <span class="font-medium">{entry.data.organization}</span>
                    <span class="mx-2">•</span>
                    <span>
                      {formatDate(entry.data.startDate)}
                      {entry.data.endDate && ` – ${formatDate(entry.data.endDate)}`}
                    </span>
                  </div>
                  {entry.data.role && (
                    <div class="text-gray-700 mt-1">{entry.data.role}</div>
                  )}
                </div>
                <div class="ml-4">
                  <span class="inline-block px-3 py-1 text-sm rounded-full bg-amber-100 text-amber-800">
                    {entry.data.type}
                  </span>
                </div>
              </div>
              
              <p class="mt-4 text-gray-700">{entry.data.summary}</p>
              
              {entry.data.tags && (
                <div class="mt-4 flex flex-wrap gap-2">
                  {entry.data.tags.map(tag => (
                    <span class="px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded">
                      {tag}
                    </span>
                  ))}
                </div>
              )}
              
              <div class="mt-6">
                <a 
                  href={`/portfolio/${entry.slug}`}
                  class="inline-flex items-center text-amber-700 hover:text-amber-900"
                >
                  View details
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </Fragment>
</Base>